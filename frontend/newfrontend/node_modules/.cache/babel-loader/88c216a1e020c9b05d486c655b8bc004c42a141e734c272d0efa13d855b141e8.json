{"ast":null,"code":"var _jsxFileName = \"G:\\\\471Project\\\\VistaShare-main\\\\frontend\\\\newfrontend\\\\src\\\\locations\\\\LocationMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { getAllLocations } from '../shared/util/dataGetters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationMap = () => {\n  _s();\n  const [locations, setLocations] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Helper function to parse coordinates from the string format \"51.0412° N, 114.0690° W\"\n  const parseCoordinates = coordinates => {\n    const [latStr, lngStr] = coordinates.split(',').map(str => str.trim());\n\n    // Extract numerical values and hemispheres (N/S for lat, E/W for lng)\n    const lat = parseFloat(latStr.split('°')[0]);\n    const lng = parseFloat(lngStr.split('°')[0]);\n    const latHemisphere = latStr.includes('S') ? -1 : 1;\n    const lngHemisphere = lngStr.includes('W') ? -1 : 1;\n\n    // Return coordinates in numeric form\n    return [lat * latHemisphere, lng * lngHemisphere];\n  };\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        const data = await getAllLocations(); // Assuming getAllLocations returns an array of location objects\n        setLocations(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching locations:', error);\n        setLoading(false);\n      }\n    };\n    fetchLocations();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [51.505, -0.09],\n      zoom: 13,\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), locations.map(location => {\n        // Parse coordinates\n        const [lat, lng] = parseCoordinates(location.Coordinates);\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: [lat, lng] // Use parsed latitude and longitude\n          ,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: location.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: location.Description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `/location/${location.LocationID}`,\n                children: \"Go to location details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this)\n        }, location.LocationID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(LocationMap, \"kld/N3vlg2rEg4lNNsIwUAk5ghs=\");\n_c = LocationMap;\nexport default LocationMap;\nvar _c;\n$RefreshReg$(_c, \"LocationMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","getAllLocations","jsxDEV","_jsxDEV","LocationMap","_s","locations","setLocations","loading","setLoading","parseCoordinates","coordinates","latStr","lngStr","split","map","str","trim","lat","parseFloat","lng","latHemisphere","includes","lngHemisphere","fetchLocations","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","center","zoom","style","height","width","url","attribution","location","Coordinates","position","Name","Description","href","LocationID","_c","$RefreshReg$"],"sources":["G:/471Project/VistaShare-main/frontend/newfrontend/src/locations/LocationMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { getAllLocations } from '../shared/util/dataGetters'; \r\n\r\nconst LocationMap = () => {\r\n    const [locations, setLocations] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Helper function to parse coordinates from the string format \"51.0412° N, 114.0690° W\"\r\n    const parseCoordinates = (coordinates) => {\r\n        const [latStr, lngStr] = coordinates.split(',').map(str => str.trim());\r\n\r\n        // Extract numerical values and hemispheres (N/S for lat, E/W for lng)\r\n        const lat = parseFloat(latStr.split('°')[0]);\r\n        const lng = parseFloat(lngStr.split('°')[0]);\r\n\r\n        const latHemisphere = latStr.includes('S') ? -1 : 1;\r\n        const lngHemisphere = lngStr.includes('W') ? -1 : 1;\r\n\r\n        // Return coordinates in numeric form\r\n        return [lat * latHemisphere, lng * lngHemisphere];\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchLocations = async () => {\r\n            try {\r\n                const data = await getAllLocations(); // Assuming getAllLocations returns an array of location objects\r\n                setLocations(data);\r\n                setLoading(false);\r\n            } catch (error) {\r\n                console.error('Error fetching locations:', error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchLocations();\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <div>Loading map...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: '400px', width: '100%' }}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n                />\r\n                {locations.map((location) => {\r\n                    // Parse coordinates\r\n                    const [lat, lng] = parseCoordinates(location.Coordinates);\r\n                    return (\r\n                        <Marker\r\n                            key={location.LocationID}\r\n                            position={[lat, lng]} // Use parsed latitude and longitude\r\n                        >\r\n                            <Popup>\r\n                                <div>\r\n                                    <h3>{location.Name}</h3>\r\n                                    <p>{location.Description}</p>\r\n                                    <a href={`/location/${location.LocationID}`}>Go to location details</a>\r\n                                </div>\r\n                            </Popup>\r\n                        </Marker>\r\n                    );\r\n                })}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LocationMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AACtE,SAASC,eAAe,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMc,gBAAgB,GAAIC,WAAW,IAAK;IACtC,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;;IAEtE;IACA,MAAMC,GAAG,GAAGC,UAAU,CAACP,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,MAAMM,GAAG,GAAGD,UAAU,CAACN,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5C,MAAMO,aAAa,GAAGT,MAAM,CAACU,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACnD,MAAMC,aAAa,GAAGV,MAAM,CAACS,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;;IAEnD;IACA,OAAO,CAACJ,GAAG,GAAGG,aAAa,EAAED,GAAG,GAAGG,aAAa,CAAC;EACrD,CAAC;EAED5B,SAAS,CAAC,MAAM;IACZ,MAAM6B,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMxB,eAAe,CAAC,CAAC,CAAC,CAAC;QACtCM,YAAY,CAACkB,IAAI,CAAC;QAClBhB,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDjB,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDe,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIhB,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAyB,QAAA,EAAK;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpC;EAEA,oBACI7B,OAAA;IAAK8B,SAAS,EAAC,eAAe;IAAAL,QAAA,eAC1BzB,OAAA,CAACN,YAAY;MAACqC,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAE;MAACC,IAAI,EAAE,EAAG;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAV,QAAA,gBACvFzB,OAAA,CAACL,SAAS;QACNyC,GAAG,EAAC,oDAAoD;QACxDC,WAAW,EAAC;MAAyF;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxG,CAAC,EACD1B,SAAS,CAACS,GAAG,CAAE0B,QAAQ,IAAK;QACzB;QACA,MAAM,CAACvB,GAAG,EAAEE,GAAG,CAAC,GAAGV,gBAAgB,CAAC+B,QAAQ,CAACC,WAAW,CAAC;QACzD,oBACIvC,OAAA,CAACJ,MAAM;UAEH4C,QAAQ,EAAE,CAACzB,GAAG,EAAEE,GAAG,CAAE,CAAC;UAAA;UAAAQ,QAAA,eAEtBzB,OAAA,CAACH,KAAK;YAAA4B,QAAA,eACFzB,OAAA;cAAAyB,QAAA,gBACIzB,OAAA;gBAAAyB,QAAA,EAAKa,QAAQ,CAACG;cAAI;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACxB7B,OAAA;gBAAAyB,QAAA,EAAIa,QAAQ,CAACI;cAAW;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC7B7B,OAAA;gBAAG2C,IAAI,EAAE,aAAaL,QAAQ,CAACM,UAAU,EAAG;gBAAAnB,QAAA,EAAC;cAAsB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH;QAAC,GATHS,QAAQ,CAACM,UAAU;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUpB,CAAC;MAEjB,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd,CAAC;AAAC3B,EAAA,CAlEID,WAAW;AAAA4C,EAAA,GAAX5C,WAAW;AAoEjB,eAAeA,WAAW;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}