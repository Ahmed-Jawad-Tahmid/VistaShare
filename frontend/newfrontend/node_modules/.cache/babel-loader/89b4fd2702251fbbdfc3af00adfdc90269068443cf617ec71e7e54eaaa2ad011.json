{"ast":null,"code":"var _jsxFileName = \"G:\\\\471Project\\\\VistaShare-main\\\\frontend\\\\newfrontend\\\\src\\\\groups\\\\components\\\\GroupPostFull.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '../../shared/components/FormElements/Button';\nimport { useParams } from 'react-router-dom';\nimport getPost from '../../shared/util/dataGetters';\nimport { getComments } from '../../shared/util/dataGetters';\nimport GroupPostComment from './GroupPostComment';\nimport './GroupPostFull.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupPostFull = () => {\n  _s();\n  const params = useParams();\n  const postId = params.id;\n  console.log(\"loading post \" + postId);\n  const [post, setPost] = useState(null);\n  const [PostComments, setPostComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newComment, setNewComment] = useState('');\n  const handleSubmitComment = async () => {\n    if (newComment.trim()) {\n      const newCommentData = {\n        Text: newComment,\n        PostID: review.PostID,\n        MemberID: review.MemberID,\n        // Assuming review.MemberID is the ID of the person making the comment\n        Media: null,\n        // If the user can add media, update this field accordingly\n        Date: new Date().toISOString().split('T')[0],\n        // Get the current date in YYYY-MM-DD format\n        Rating: 1 // Add a rating if necessary, otherwise leave null\n      };\n\n      // Add the new comment to the state (for now we assume this is a client-side update)\n      setComments(prevComments => [...prevComments, newCommentData]);\n\n      // Optionally, reset the newComment state\n      setNewComment('');\n\n      // Call a function to submit the comment to the backend (e.g., POST request)\n      try {\n        // Assuming you have an API function `submitComment` for sending POST requests to the backend\n        await submitComment(newCommentData); // This would post the comment to your Express API\n\n        // Optionally handle response after submitting\n        // e.g., show success notification or update state if the comment has an ID\n      } catch (error) {\n        console.error('Error submitting comment:', error);\n        alert('Error submitting comment');\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchPostData = async () => {\n      const [fetchedPost, fetchedComments] = await Promise.all([getPost(postId), getComments(postId)]);\n      console.log(fetchedPost);\n      console.log(fetchedComments);\n      setPost(fetchedPost);\n      setPostComments(fetchedComments);\n      setLoading(false);\n    };\n    console.log(post);\n    console.log(PostComments);\n    fetchPostData();\n  }, [postId]);\n  const IncrementMetric = () => {\n    console.log(\"imagine it increments\");\n  };\n  const DecrementMetric = () => {\n    console.log(\"imagine it increments\");\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  }\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Post not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: post.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: post.Text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Metrics\",\n      children: [\"+\", post.Rating, /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          backgroundColor: '#ff4d4d'\n        },\n        onClick: IncrementMetric,\n        children: \"Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: DecrementMetric,\n        children: \"Dislike\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: handleCommentChange,\n        placeholder: \"Add a comment...\",\n        rows: \"2\" // Smaller height for the text area\n        ,\n        className: \"comment-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitComment,\n        className: \"submit-comment-button\",\n        children: \"Submit Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToggleComments,\n      children: showComments ? 'Hide Comments' : 'Show Comments'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-list\",\n      children: PostComments.map(comment => /*#__PURE__*/_jsxDEV(GroupPostComment, {\n        comment: comment\n      }, comment.CommentID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(GroupPostFull, \"VtVnGNL1h9R+Y291xyguwhqpmQY=\", false, function () {\n  return [useParams];\n});\n_c = GroupPostFull;\nexport default GroupPostFull;\nvar _c;\n$RefreshReg$(_c, \"GroupPostFull\");","map":{"version":3,"names":["React","useState","useEffect","Button","useParams","getPost","getComments","GroupPostComment","jsxDEV","_jsxDEV","GroupPostFull","_s","params","postId","id","console","log","post","setPost","PostComments","setPostComments","loading","setLoading","newComment","setNewComment","handleSubmitComment","trim","newCommentData","Text","PostID","review","MemberID","Media","Date","toISOString","split","Rating","setComments","prevComments","submitComment","error","alert","fetchPostData","fetchedPost","fetchedComments","Promise","all","IncrementMetric","DecrementMetric","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Title","style","backgroundColor","onClick","value","onChange","handleCommentChange","placeholder","rows","handleToggleComments","showComments","map","comment","CommentID","_c","$RefreshReg$"],"sources":["G:/471Project/VistaShare-main/frontend/newfrontend/src/groups/components/GroupPostFull.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport { useParams } from 'react-router-dom';\r\nimport getPost from '../../shared/util/dataGetters';\r\nimport { getComments } from '../../shared/util/dataGetters';\r\nimport GroupPostComment from './GroupPostComment';\r\nimport './GroupPostFull.css';\r\n\r\nconst GroupPostFull = () => {\r\n    const params  = useParams(); \r\n    const postId = params.id; \r\n    console.log(\"loading post \" + postId);\r\n    const [post, setPost] = useState(null);\r\n    const [PostComments, setPostComments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n\r\n    const handleSubmitComment = async () => {\r\n        if (newComment.trim()) {\r\n          const newCommentData = {\r\n            Text: newComment,\r\n            PostID: review.PostID,\r\n            MemberID: review.MemberID, // Assuming review.MemberID is the ID of the person making the comment\r\n            Media: null, // If the user can add media, update this field accordingly\r\n            Date: new Date().toISOString().split('T')[0], // Get the current date in YYYY-MM-DD format\r\n            Rating: 1, // Add a rating if necessary, otherwise leave null\r\n          };\r\n      \r\n          // Add the new comment to the state (for now we assume this is a client-side update)\r\n          setComments((prevComments) => [...prevComments, newCommentData]);\r\n      \r\n          // Optionally, reset the newComment state\r\n          setNewComment('');\r\n      \r\n          // Call a function to submit the comment to the backend (e.g., POST request)\r\n          try {\r\n            // Assuming you have an API function `submitComment` for sending POST requests to the backend\r\n            await submitComment(newCommentData);  // This would post the comment to your Express API\r\n      \r\n            // Optionally handle response after submitting\r\n            // e.g., show success notification or update state if the comment has an ID\r\n          } catch (error) {\r\n            console.error('Error submitting comment:', error);\r\n            alert('Error submitting comment');\r\n          }\r\n        }\r\n      };\r\n    useEffect(() => {\r\n        const fetchPostData = async () => {\r\n            const [fetchedPost, fetchedComments] = await Promise.all([\r\n                getPost(postId),\r\n                getComments(postId)\r\n              ]);\r\n            console.log(fetchedPost);\r\n            console.log(fetchedComments);\r\n            setPost(fetchedPost);\r\n            setPostComments(fetchedComments);\r\n            setLoading(false);\r\n        };\r\n        console.log(post);\r\n        console.log(PostComments); \r\n\r\n        fetchPostData();\r\n    }, [postId]);\r\n\r\n    const IncrementMetric = () => {\r\n        console.log(\"imagine it increments\");\r\n    };\r\n\r\n    const DecrementMetric = () => {\r\n        console.log(\"imagine it increments\");\r\n    };\r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (!post) {\r\n        return <div>Post not found</div>;\r\n    }\r\n\r\n    return (\r\n   \r\n        <div className=\"PostBody\"> \r\n                <h1>{post.Title}</h1>\r\n                <div>{post.Text}</div>\r\n                <div className=\"Metrics\">\r\n                    +{post.Rating}\r\n                    <Button style = {{backgroundColor: '#ff4d4d'}}         \r\n                    onClick={IncrementMetric}>Like</Button>\r\n                    <Button onClick={DecrementMetric}>Dislike</Button>\r\n                </div>    \r\n            \r\n\r\n            <div className=\"add-comment\">\r\n                <textarea \r\n                value={newComment}\r\n                onChange={handleCommentChange}\r\n                placeholder=\"Add a comment...\"\r\n                rows=\"2\" // Smaller height for the text area\r\n                className=\"comment-textarea\"\r\n                />\r\n                <button onClick={handleSubmitComment} className=\"submit-comment-button\">\r\n                Submit Comment\r\n                </button>\r\n            </div>\r\n\r\n            <button onClick={handleToggleComments}>\r\n                {showComments ? 'Hide Comments' : 'Show Comments'}\r\n            </button>\r\n            \r\n            <div className=\"comment-list\"> \r\n                {PostComments.map((comment) => (\r\n                    <GroupPostComment \r\n                        key={comment.CommentID}\r\n                        comment={comment}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n                \r\n    );\r\n};\r\n\r\nexport default GroupPostFull;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}