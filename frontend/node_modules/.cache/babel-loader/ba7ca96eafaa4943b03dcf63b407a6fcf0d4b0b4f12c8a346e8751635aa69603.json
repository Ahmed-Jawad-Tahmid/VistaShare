{"ast":null,"code":"var _jsxFileName = \"G:\\\\471Project\\\\VistaShare-main\\\\frontend\\\\newfrontend\\\\src\\\\travel\\\\pages\\\\Travellogs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport TravelLogList from \"../components/TravelLogList\";\nimport { getTravelLogsByUserId } from \"../../shared/util/dataGetters\"; // Importing the new method\nimport AuthContext from \"../../shared/context/auth-context\";\nimport \"./TravelLogs.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TravelLogs = () => {\n  _s();\n  const {\n    Credentials\n  } = useContext(AuthContext); // Getting the logged-in user's credentials\n  const [travelLogs, setTravelLogs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchLogs = async () => {\n      try {\n        // Using the getTravelLogsByUserId function to fetch the logs\n        const logs = await getTravelLogsByUserId(Credentials.userId);\n        if (logs) {\n          setTravelLogs(logs);\n        } else {\n          setError(\"No travel logs found for this user.\");\n        }\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (Credentials.userId) {\n      fetchLogs();\n    }\n  }, [Credentials.userId]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-posts\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Travel Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TravelLogList, {\n      logs: travelLogs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TravelLogs, \"t3svqVDvj9RsBYWZ+82k8neL5o8=\");\n_c = TravelLogs;\nexport default TravelLogs;\nvar _c;\n$RefreshReg$(_c, \"TravelLogs\");","map":{"version":3,"names":["React","useEffect","useState","useContext","TravelLogList","getTravelLogsByUserId","AuthContext","jsxDEV","_jsxDEV","TravelLogs","_s","Credentials","travelLogs","setTravelLogs","isLoading","setIsLoading","error","setError","fetchLogs","logs","userId","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["G:/471Project/VistaShare-main/frontend/newfrontend/src/travel/pages/Travellogs.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport TravelLogList from \"../components/TravelLogList\";\r\nimport { getTravelLogsByUserId } from \"../../shared/util/dataGetters\"; // Importing the new method\r\nimport AuthContext from \"../../shared/context/auth-context\";\r\nimport \"./TravelLogs.css\";\r\n\r\nconst TravelLogs = () => {\r\n  const { Credentials } = useContext(AuthContext); // Getting the logged-in user's credentials\r\n  const [travelLogs, setTravelLogs] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchLogs = async () => {\r\n      try {\r\n        // Using the getTravelLogsByUserId function to fetch the logs\r\n        const logs = await getTravelLogsByUserId(Credentials.userId);\r\n        if (logs) {\r\n          setTravelLogs(logs);\r\n        } else {\r\n          setError(\"No travel logs found for this user.\");\r\n        }\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    if (Credentials.userId) {\r\n      fetchLogs();\r\n    }\r\n  }, [Credentials.userId]);\r\n\r\n  if (isLoading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  return (\r\n    <div className=\"user-posts\">\r\n      <h1>My Travel Logs</h1>\r\n      <TravelLogList logs={travelLogs} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TravelLogs;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,aAAa,MAAM,6BAA6B;AACvD,SAASC,qBAAqB,QAAQ,+BAA+B,CAAC,CAAC;AACvE,OAAOC,WAAW,MAAM,mCAAmC;AAC3D,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAY,CAAC,GAAGR,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC;EACjD,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,IAAI,GAAG,MAAMd,qBAAqB,CAACM,WAAW,CAACS,MAAM,CAAC;QAC5D,IAAID,IAAI,EAAE;UACRN,aAAa,CAACM,IAAI,CAAC;QACrB,CAAC,MAAM;UACLF,QAAQ,CAAC,qCAAqC,CAAC;QACjD;MACF,CAAC,CAAC,OAAOI,GAAG,EAAE;QACZJ,QAAQ,CAACI,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRP,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED,IAAIJ,WAAW,CAACS,MAAM,EAAE;MACtBF,SAAS,CAAC,CAAC;IACb;EACF,CAAC,EAAE,CAACP,WAAW,CAACS,MAAM,CAAC,CAAC;EAExB,IAAIN,SAAS,EAAE,oBAAON,OAAA;IAAAe,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACvC,IAAIX,KAAK,EAAE,oBAAOR,OAAA;IAAAe,QAAA,GAAG,SAAO,EAACP,KAAK;EAAA;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAEvC,oBACEnB,OAAA;IAAKoB,SAAS,EAAC,YAAY;IAAAL,QAAA,gBACzBf,OAAA;MAAAe,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBnB,OAAA,CAACJ,aAAa;MAACe,IAAI,EAAEP;IAAW;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV,CAAC;AAACjB,EAAA,CArCID,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AAuChB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}