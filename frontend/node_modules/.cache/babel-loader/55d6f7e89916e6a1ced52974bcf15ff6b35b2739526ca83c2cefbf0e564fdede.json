{"ast":null,"code":"var _jsxFileName = \"G:\\\\471Project\\\\VistaShare-main\\\\frontend\\\\newfrontend\\\\src\\\\locations\\\\components\\\\review.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getComments } from '../../shared/util/dataGetters';\nimport GroupPostComment from '../../groups/components/GroupPostComment';\nimport './review.css';\nimport submitComment from '../../shared/util/dataSetters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Review = ({\n  review,\n  memberNames\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [showComments, setShowComments] = useState(false);\n  const [newComment, setNewComment] = useState(''); // State to store new comment text\n\n  const handleCommentChange = e => {\n    setNewComment(e.target.value); // Update the new comment as user types\n  };\n  const handleSubmitComment = async () => {\n    if (newComment.trim()) {\n      const newCommentData = {\n        Text: newComment,\n        PostID: review.PostID,\n        MemberID: review.MemberID,\n        // Assuming review.MemberID is the ID of the person making the comment\n        Media: null,\n        // If the user can add media, update this field accordingly\n        Date: new Date().toISOString().split('T')[0],\n        // Get the current date in YYYY-MM-DD format\n        Rating: 1 // Add a rating if necessary, otherwise leave null\n      };\n\n      // Add the new comment to the state (for now we assume this is a client-side update)\n      setComments(prevComments => [...prevComments, newCommentData]);\n\n      // Optionally, reset the newComment state\n      setNewComment('');\n\n      // Call a function to submit the comment to the backend (e.g., POST request)\n      try {\n        // Assuming you have an API function `submitComment` for sending POST requests to the backend\n        await submitComment(newCommentData); // This would post the comment to your Express API\n\n        // Optionally handle response after submitting\n        // e.g., show success notification or update state if the comment has an ID\n      } catch (error) {\n        console.error('Error submitting comment:', error);\n        alert('Error submitting comment');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"review\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"review-title\",\n      children: review.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"review-text\",\n      children: review.Text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), review.Media && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: review.Media,\n      alt: \"Review Media\",\n      className: \"review-media\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"review-rating\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Rating: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), review.Rating || 'Not rated']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"review-date\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), new Date(review.Date).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"review-member\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Reviewed by: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), memberNames[review.MemberID] || 'Loading...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: handleCommentChange,\n        placeholder: \"Add a comment...\",\n        rows: \"2\" // Smaller height for the text area\n        ,\n        className: \"comment-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitComment,\n        className: \"submit-comment-button\",\n        children: \"Submit Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), showComments && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(GroupPostComment, {\n        comment: comment\n      }, comment.CommentID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Review, \"9j6A1Jk/h9dIwRIEbXXAXHljxyI=\");\n_c = Review;\nexport default Review;\nvar _c;\n$RefreshReg$(_c, \"Review\");","map":{"version":3,"names":["React","useState","getComments","GroupPostComment","submitComment","jsxDEV","_jsxDEV","Review","review","memberNames","_s","comments","setComments","showComments","setShowComments","newComment","setNewComment","handleCommentChange","e","target","value","handleSubmitComment","trim","newCommentData","Text","PostID","MemberID","Media","Date","toISOString","split","Rating","prevComments","error","console","alert","className","children","Title","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","toLocaleDateString","onChange","placeholder","rows","onClick","length","map","comment","CommentID","_c","$RefreshReg$"],"sources":["G:/471Project/VistaShare-main/frontend/newfrontend/src/locations/components/review.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { getComments } from '../../shared/util/dataGetters';\r\nimport GroupPostComment from '../../groups/components/GroupPostComment';\r\nimport './review.css';\r\nimport submitComment from '../../shared/util/dataSetters';\r\n\r\nconst Review = ({ review, memberNames }) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [showComments, setShowComments] = useState(false);\r\n  const [newComment, setNewComment] = useState(''); // State to store new comment text\r\n\r\n\r\n  const handleCommentChange = (e) => {\r\n    setNewComment(e.target.value); // Update the new comment as user types\r\n  };\r\n\r\n  const handleSubmitComment = async () => {\r\n    if (newComment.trim()) {\r\n      const newCommentData = {\r\n        Text: newComment,\r\n        PostID: review.PostID,\r\n        MemberID: review.MemberID, // Assuming review.MemberID is the ID of the person making the comment\r\n        Media: null, // If the user can add media, update this field accordingly\r\n        Date: new Date().toISOString().split('T')[0], // Get the current date in YYYY-MM-DD format\r\n        Rating: 1, // Add a rating if necessary, otherwise leave null\r\n      };\r\n  \r\n      // Add the new comment to the state (for now we assume this is a client-side update)\r\n      setComments((prevComments) => [...prevComments, newCommentData]);\r\n  \r\n      // Optionally, reset the newComment state\r\n      setNewComment('');\r\n  \r\n      // Call a function to submit the comment to the backend (e.g., POST request)\r\n      try {\r\n        // Assuming you have an API function `submitComment` for sending POST requests to the backend\r\n        await submitComment(newCommentData);  // This would post the comment to your Express API\r\n  \r\n        // Optionally handle response after submitting\r\n        // e.g., show success notification or update state if the comment has an ID\r\n      } catch (error) {\r\n        console.error('Error submitting comment:', error);\r\n        alert('Error submitting comment');\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"review\">\r\n      <h3 className=\"review-title\">{review.Title}</h3>\r\n      <p className=\"review-text\">{review.Text}</p>\r\n      {review.Media && <img src={review.Media} alt=\"Review Media\" className=\"review-media\" />}\r\n      <div className=\"review-rating\">\r\n        <strong>Rating: </strong>{review.Rating || 'Not rated'}\r\n      </div>\r\n      <div className=\"review-date\">\r\n        <strong>Date: </strong>{new Date(review.Date).toLocaleDateString()}\r\n      </div>\r\n      <div className=\"review-member\">\r\n        <strong>Reviewed by: </strong>{memberNames[review.MemberID] || 'Loading...'}\r\n      </div>\r\n\r\n      {/* Submit comment box */}\r\n      <div className=\"add-comment\">\r\n        <textarea \r\n          value={newComment}\r\n          onChange={handleCommentChange}\r\n          placeholder=\"Add a comment...\"\r\n          rows=\"2\" // Smaller height for the text area\r\n          className=\"comment-textarea\"\r\n        />\r\n        <button onClick={handleSubmitComment} className=\"submit-comment-button\">\r\n          Submit Comment\r\n        </button>\r\n      </div>\r\n\r\n      {showComments && (\r\n        <div className=\"comments\">\r\n          {comments.length > 0 ? (\r\n            comments.map((comment) => (\r\n              <GroupPostComment \r\n                key={comment.CommentID} \r\n                comment={comment} \r\n              />\r\n            ))\r\n          ) : (\r\n            <p>No comments available.</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Review;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}