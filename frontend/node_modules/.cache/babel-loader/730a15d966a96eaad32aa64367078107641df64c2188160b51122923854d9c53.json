{"ast":null,"code":"import axios from 'axios';\nconst fetchDataFromDummy = async () => {\n  try {\n    const response = await axios.get('/DanielY2711/dummydb/db');\n    console.log(response.data);\n    return response.data; // Return the data after fetching\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Function to get a single post by ID\nconst getPost = async postid => {\n  console.log(`getting post ${postid}`);\n  try {\n    const post = await axios.get(`/api/post/${postid}`);\n    console.log(post.data);\n    return post.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Function to get comments for a specific post\nconst getComments = async postid => {\n  console.log(`getting commets on post ${postid}`);\n  try {\n    const comments = await axios.get(`/api/comment/${postid}`);\n    console.log(comments.data.data);\n    return comments.data.data || [];\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Function to get a username by user ID\nconst getUserName = async userid => {\n  console.log(`getting name for uid ${userid}`);\n  try {\n    const name = await axios.get(`/api/user/getName/${userid}`);\n    console.log(name.data.data[0].Name);\n    return name.data.data[0].Name;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Function to get a group by name\nconst getGroup = async gname => {\n  console.log(`getting group for name ${gname}`);\n  try {\n    const name = await axios.get(`/api/group/${gname}`);\n    console.log(name.data);\n    return name.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Function to get group posts by group name\nconst getGroupPosts = async gname => {\n  console.log(`getting group for name ${gname}`);\n  try {\n    const posts = await axios.get(`/api/group/posts/${gname}`);\n    console.log(posts.data);\n    return posts.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Function to get all groups a user is part of\nconst getUserGroups = async userid => {\n  console.log(`getting groups for user ${userid}`);\n  try {\n    const groups = await axios.get(`/api/group/userG/${userid}`);\n    console.log(groups.data);\n    return groups.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\nconst verifyCredentials = async (email, password) => {\n  console.log(`getting auth for user ${email}`);\n  try {\n    const user = await axios.get(`/api/user/${email}/${password}`);\n    console.log(Object.keys(user.data.data));\n    return Object.keys(user.data.data).length > 0;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return false; // Return null or handle error accordingly\n  }\n};\nconst getUserId = async email => {\n  console.log(`getting uid for user ${email}`);\n  try {\n    const user = await axios.get(`/api/user/getUid/${email}`);\n    console.log(user.data.data[0].MemberID);\n    return user.data.data[0].MemberID;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\nconst getAllUsers = async () => {\n  console.log(`getting all users`);\n  try {\n    const users = await axios.get(`/api/user/`);\n    console.log(users.data.data);\n    return users.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// All Locations\nconst getAllLocations = async () => {\n  console.log('getting all locations');\n  try {\n    const users = await axios.get(`/api/location/`);\n    console.log(users.data.data);\n    return users.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Location reviews based on location\nconst getLocationReviews = async id => {\n  console.log(`getting all location reviews for ${id}`);\n  try {\n    const reviews = await axios.get(`/api/post/location/${id}`);\n    console.log(reviews.data.data);\n    return reviews.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\nconst getLocation = async id => {\n  console.log('getting all locations');\n  try {\n    const reviews = await axios.get(`/api/location/${id}`);\n    console.log(reviews.data.data);\n    return reviews.data.data;\n  } catch (error) {\n    console.error('Failed data request', error);\n    return null; // Return null or handle error accordingly\n  }\n};\n\n// Exports\nexport default getPost;\nexport { getComments, getUserName, getGroup, getUserGroups, verifyCredentials, getUserId, getAllUsers, getGroupPosts, getAllLocations, getLocationReviews };","map":{"version":3,"names":["axios","fetchDataFromDummy","response","get","console","log","data","error","getPost","postid","post","getComments","comments","getUserName","userid","name","Name","getGroup","gname","getGroupPosts","posts","getUserGroups","groups","verifyCredentials","email","password","user","Object","keys","length","getUserId","MemberID","getAllUsers","users","getAllLocations","getLocationReviews","id","reviews","getLocation"],"sources":["G:/471Project/VistaShare-main/frontend/newfrontend/src/shared/util/dataGetters.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst fetchDataFromDummy = async () => {\r\n    try {\r\n        const response = await axios.get('/DanielY2711/dummydb/db');\r\n        console.log(response.data);\r\n        return response.data; // Return the data after fetching\r\n    } catch (error) {\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n};\r\n\r\n// Function to get a single post by ID\r\nconst getPost = async (postid) => {\r\n    console.log(`getting post ${postid}`)\r\n    try {\r\n        const post = await axios.get(`/api/post/${postid}`);\r\n        console.log(post.data);\r\n        return post.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n\r\n};\r\n\r\n// Function to get comments for a specific post\r\nconst getComments = async (postid) => {\r\n    \r\n    console.log(`getting commets on post ${postid}`)\r\n    try {\r\n        const comments = await axios.get(`/api/comment/${postid}`);\r\n        console.log(comments.data.data);\r\n        return comments.data.data || []; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n};\r\n\r\n// Function to get a username by user ID\r\nconst getUserName = async (userid) => {\r\n    \r\n    console.log(`getting name for uid ${userid}`)\r\n    try {\r\n        const name = await axios.get(`/api/user/getName/${userid}`);\r\n        console.log(name.data.data[0].Name);\r\n        return name.data.data[0].Name; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n    \r\n};\r\n\r\n// Function to get a group by name\r\nconst getGroup = async (gname) => {\r\n    console.log(`getting group for name ${gname}`)\r\n    try {\r\n        const name = await axios.get(`/api/group/${gname}`);\r\n        console.log(name.data);\r\n        return name.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n};\r\n\r\n// Function to get group posts by group name\r\nconst getGroupPosts = async (gname) => {\r\n    \r\n    console.log(`getting group for name ${gname}`)\r\n    try {\r\n        const posts = await axios.get(`/api/group/posts/${gname}`);\r\n        console.log(posts.data);\r\n        return posts.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n    \r\n}\r\n\r\n// Function to get all groups a user is part of\r\nconst getUserGroups = async (userid) => {\r\n\r\n    console.log(`getting groups for user ${userid}`)\r\n    try {\r\n        const groups = await axios.get(`/api/group/userG/${userid}`);\r\n        console.log(groups.data);\r\n        return groups.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n}\r\n\r\nconst verifyCredentials = async (email, password) => {\r\n\r\n    console.log(`getting auth for user ${email}`)\r\n    try {\r\n        const user = await axios.get(`/api/user/${email}/${password}`);\r\n        console.log(Object.keys(user.data.data));\r\n\r\n        return Object.keys(user.data.data).length > 0; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return false; // Return null or handle error accordingly\r\n    }\r\n}\r\n\r\n\r\nconst getUserId = async (email) => {\r\n    console.log(`getting uid for user ${email}`)\r\n    try {\r\n        const user = await axios.get(`/api/user/getUid/${email}`);\r\n        console.log(user.data.data[0].MemberID);\r\n        return user.data.data[0].MemberID; \r\n\r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n}\r\n\r\nconst getAllUsers = async() => {\r\n    console.log(`getting all users`)\r\n    try {\r\n        const users = await axios.get(`/api/user/`);\r\n        console.log(users.data.data);\r\n\r\n        return users.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n}\r\n\r\n// All Locations\r\nconst getAllLocations = async() => {\r\n    console.log('getting all locations');\r\n    try {\r\n        const users = await axios.get(`/api/location/`);\r\n        console.log(users.data.data);\r\n\r\n        return users.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n}\r\n\r\n// Location reviews based on location\r\nconst getLocationReviews = async(id) => {\r\n    \r\n    console.log(`getting all location reviews for ${id}`);\r\n    try {\r\n        const reviews = await axios.get(`/api/post/location/${id}`);\r\n        console.log(reviews.data.data);\r\n\r\n        return reviews.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n}\r\n\r\nconst getLocation = async(id) =>{\r\n    console.log('getting all locations');\r\n    try {\r\n        const reviews = await axios.get(`/api/location/${id}`);\r\n        console.log(reviews.data.data);\r\n\r\n        return reviews.data.data; \r\n    } catch (error){\r\n        console.error('Failed data request', error);\r\n        return null; // Return null or handle error accordingly\r\n    }\r\n}\r\n\r\n// Exports\r\nexport default getPost;\r\nexport { getComments, getUserName, getGroup, getUserGroups, verifyCredentials, getUserId, getAllUsers, getGroupPosts, getAllLocations, getLocationReviews};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}